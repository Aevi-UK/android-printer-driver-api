apply plugin: 'maven-publish'

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

configurations {
    javadoc_extra_jars
}

dependencies {
    javadoc_extra_jars "${domainDependencies.rxJava}@jar",
            "${domainDependencies.rxMessenger}@jar",
            "${domainDependencies.printApi}@jar",
            "${domainDependencies.jsonConverter}@jar",
            "${presentationDependencies.supportAnnotation}@jar"
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += files(configurations.javadoc_extra_jars.files)
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

android.libraryVariants.all { variant ->
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile
    task.from variant.getJavaCompiler().destinationDir
    artifacts.add('archives', task);
}

def siteUrl = 'https://github.com/Aevi-UK/android-pos-print-api'
def gitUrl = 'https://github.com/Aevi-UK/android-pos-print-api.git'

// Create the pom configuration:
def pomConfig = {
    name 'AndroidPosPrinterDriverApi'
    url siteUrl
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }
    developers {
        developer {
            id 'brettwold'
            name 'Brett Cherrington'
            email 'brett@annalytics.co.uk'
        }
    }
    scm {
        connection gitUrl
        developerConnection gitUrl
        url siteUrl
    }
}

publishing {
    publications {
        print(MavenPublication) {
            groupId 'com.aevi.print'
            artifactId "${artifactId}"
            version "${apiVersion}"

            afterEvaluate {
                artifact jarRelease
                artifact bundleReleaseAar
                artifact javadocJar
                artifact sourcesJar
            }

            pom.withXml {
                def root = asNode()
                root.children().last() + pomConfig

                def dependenciesNode = root.appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included in the pom.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

bintray {
    if (project.hasProperty('bintrayUser') && project.hasProperty('bintrayKey')) {
        user = project.bintrayUser
        key = project.bintrayKey
    }
    publications = ['print']
    configurations = ['archives']
    override = true

    pkg {
        dryRun = false
        publish = true
        repo = 'aevi-uk'
        name = 'android-pos-print-api'
        userOrg = 'aevi'
        licenses = ['Apache-2.0']
        labels = ['printing', 'receipt', 'POS', 'android']
        websiteUrl = siteUrl
        issueTrackerUrl = "${siteUrl}/issues"
        vcsUrl = gitUrl
        publicDownloadNumbers = true
    }
}
